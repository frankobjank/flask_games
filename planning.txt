Need to handle same user joining the same room - could prevent like runescape "you already have a session running, must wait for that one to close"

# Overall layout

Home page that is game-based
  Click game -> render lobby for specific games

  Can have an option for `All`

Lobby
  Table of rooms - sortable by any attribute -> create room or join an existing room

Room creation

  Put room into database on creation - Maybe limit to 5 created per person, prompt them to delete previous room if they've made 5

  Room schema:
  Room id
  Room name
  Room password - no password is required. If blank, set to NULL in sql
  Room game
  Room capacity
  Time created
  Time last used
  Room creator

  If game in progress - current game state? Push game states to database periodically? Or maybe on every move?
  Could create save state 

  Automatically delete a room when last player leaves?
  Delete room after (3?) days of inactivity

  Option to make a private/hidden room that doesn't appear in lobby and you can send link for others to join. This should not be added to database since they are more intended as one-use only and can be deleted after last user leaves.

Game
  Room that has 1 game and a chat box
  Button to go back to lobby (put in nav bar?)




Lobby -> Pick name of room
Game -> Pass in (name of room / username) and call join room from game page

Can potentially use namespaces to create unlisted rooms that are reached by namespace rules (i.e. specifying a unique path)




Data structures:

rooms {"room_name": Room()}

Room() - self.users = []
User() - name, session_cookie, sid, room

session_to_user = {}  # session cookie: User class

sid_to_user = {}
user_to_sid = {}
















Joining Room from Lobby Pseudocode

User clicks on a row to join
Client send check_rejoin event
Server checks if user session cookie is in the room being joined

-- BLOCKING -- 
If True:
  Server returns username

Else:
  Server returns no match
  At this point the request to join can technically be cancelled
  Set username will trigger join when username is accepted
  This avoids chaining the promises and having a blocking operation behind a conditional

  Client prompts user to set username
  
  -- BLOCKING --
  Server validates input
  If pass validation:
    Server returns username

Client requests leave lobby
-- BLOCKING --
Server removes player and sends teardown request

Client teardown of lobby

Client requests join room

Server adds player and sends room setup request
